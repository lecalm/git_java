//数独问题考虑用回溯算法
class Solution {
   
    public void solveSudoku(char[][] board) {
        int row = board.length;
        int col = board[0].length;
        helper(board, 0, 0);
   

    }
    public boolean helper(char[][] board, int row, int col){
        int m = 9;
        int n = 9;
        //当在某一行的终点时，换到下一行
        if(col == n){
            return helper(board, row+1, 0);
        }
        //若是穷举到了最后一行，表明已经穷举完毕（第三个for循环里的isValid()函数已经提前判断了最后一行是否合法）
        if(row == m){
            return true;
        }
        for(int i=row; i<m; i++){
            for(int j=col; j<n; j++){
                if(board[i][j] != '.'){
                    return helper(board, i, j+1);
                }
                for(char c='1'; c<='9';c++){
                    if(!isValid(board, i, j, c)){
                        continue;
                    }
                    board[i][j] = c;
                    //递归只需要找到一个满足条件的情况即可
                    if(helper(board,i,j+1)){
                        return true;
                    }
                    board[i][j] = '.';
                }
                return false;
            }
        }
        return false;
        }

    public boolean isValid(char[][] board, int row, int col, char n){
        for(int i=0; i<9; i++){
            if(board[row][i] == n){
                return false;
            }
            if(board[i][col] == n){
                return false;
            }
            //这里的用row和col表示小9*9方格的表示需要学习
            if(board[(row/3)*3+i/3][(col/3)*3+i%3] == n){
                return false;
            }
        }
        return true;


    }
}
