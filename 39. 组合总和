List<List<Integer>> lists = new ArrayList<>();

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if (candidates == null || candidates.length == 0 || target < 0) {
            return lists;
        }

        List<Integer> list = new ArrayList<>();
        process(0, candidates, target, list);
        return lists;
    }

    private void process(int start, int[] candidates, int target, List<Integer> list) {
        //递归的终止条件
        if (target < 0) {
            return;
        }
        if (target == 0) {
            lists.add(new ArrayList<>(list));
        } else {
            for (int i = start; i < candidates.length; i++) {
                list.add(candidates[i]);
                //因为每个数字都可以使用无数次，所以递归还可以从当前元素开始
                //加入传参列表不传入start，那么就会出现组合的情况，举例如下
                /*
                target = 5
                for i in range(1, 11):
                    for j in range(1, 11):
                        for z in range(1, 11):
                            if i + j + z == target:
                                print(i, j, z)
                输出：

                    1 1 3
                    1 2 2
                    1 3 1
                    2 1 2
                    2 2 1
                    3 1 1
                   target = 5
                   
                for i in range(1, 11):
                    for j in range(i, 11):  # change and [i,10]
                        for z in range(j, 11):
                            if i + j + z == target:
                                print(i, j, z) 
               输出：

                    1 1 3
                    1 2 2
                
                **/
           
                process(i, candidates, target - candidates[i], list);
                list.remove(list.size() - 1);
            }
        }

    }
