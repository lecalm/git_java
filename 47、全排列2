//因为有重复数字，在递归将数字添加进数组的时候，我考虑利用HashSet来存储nums[]数组的下标，这样，即使在1被使用的情况下，
//下一个1也能被存储进数组，但是实际操作的时候，res.add(path)的时候，会再次把第二个一进入数组，这样实际返回的是值是每个全排列返回了两次，
//因此最后考虑res用HashSet格式
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        
        HashSet<List<Integer>> res = new HashSet<>();
        List<List<Integer>> resReturn = new ArrayList<>();
        if(nums.length == 0){
            return resReturn;
        }
        
        Set<Integer> m = new HashSet<>();
        List<Integer> path = new ArrayList<>();
        dfs(path,nums,m,res,0);
        for(List<Integer> li:res){
            resReturn.add(li);
        }
        return resReturn;

    }
    public void dfs(List<Integer> path, int[] nums, Set<Integer> m,HashSet<List<Integer>> res, int depth ){
        if(depth == nums.length){
            res.add(new ArrayList(path));
            return;
        }
        for(int i=0; i<nums.length; i++){
            if(!m.contains(i)){
                path.add(nums[i]);
                m.add(i);
                dfs(path,nums,m,res,depth+1);
                path.remove(path.size()-1);
                m.remove(i);
            }
        }
    }
}

***********************上面的方法效率偏低，实际剪枝的时候应考虑下面******************************
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.List;

public class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        int len = nums.length;
        List<List<Integer>> res = new ArrayList<>();
        if (len == 0) {
            return res;
        }

        // 排序（升序或者降序都可以），排序是剪枝的前提
        Arrays.sort(nums);

        boolean[] used = new boolean[len];
        // 使用 Deque 是 Java 官方 Stack 类的建议
        Deque<Integer> path = new ArrayDeque<>(len);
        dfs(nums, len, 0, used, path, res);
        return res;
    }

    private void dfs(int[] nums, int len, int depth, boolean[] used, Deque<Integer> path, List<List<Integer>> res) {
        if (depth == len) {
            res.add(new ArrayList<>(path));
            return;
        }

        for (int i = 0; i < len; ++i) {
            if (used[i]) {
                continue;
            }

            // 剪枝条件：i > 0 是为了保证 nums[i - 1] 有意义
            // 写 !used[i - 1] 是因为 nums[i - 1] 在深度优先遍历的过程中刚刚被撤销选择
            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {
                continue;
            }

            path.addLast(nums[i]);
            used[i] = true;

            dfs(nums, len, depth + 1, used, path, res);
            // 回溯部分的代码，和 dfs 之前的代码是对称的
            used[i] = false;
            path.removeLast();
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {1, 1, 2};
        List<List<Integer>> res = solution.permuteUnique(nums);
        System.out.println(res);
    }
}


